#!/bin/bash

# ########################################################################
# This program could be part of Percona Monitoring Plugins
# License: GPL License (see COPYING)
# Authors:
#  Gert van Dijk, Baron Schwartz
# ########################################################################

# ########################################################################
# Redirect STDERR to STDOUT; Nagios doesn't handle STDERR.
# ########################################################################
exec 2>&1

# ########################################################################
# Set up constants, etc.
# ########################################################################
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

# ########################################################################
# Run the program.
# ########################################################################
main() {
   # Get options
   for o; do
      case "${o}" in
         -c)              shift; OPT_CRIT="${1}"; shift; ;;
         --defaults-file) shift; OPT_DEFT="${1}"; shift; ;;
         -H)              shift; OPT_HOST="${1}"; shift; ;;
         -l)              shift; OPT_USER="${1}"; shift; ;;
         -p)              shift; OPT_PASS="${1}"; shift; ;;
         -P)              shift; OPT_PORT="${1}"; shift; ;;
         -S)              shift; OPT_SOCK="${1}"; shift; ;;
         -T)              shift; OPT_TABLE="${1}"; shift; ;;
         -w)              shift; OPT_WARN="${1}"; shift; ;;
         --version)       grep -A2 '^=head1 VERSION' "$0" | tail -n1; exit 0 ;;
         --help)          perl -00 -ne 'm/^  Usage:/ && print' "$0"; exit 0 ;;
         -*)              echo "Unknown option ${o}.  Try --help."; exit 1; ;;
      esac
   done
   OPT_TABLE="${OPT_TABLE:-percona.checksums}"
   OPT_WARN="${OPT_WARN:-24}"
   OPT_WARN="${OPT_WARN:-168}"

   if [ -e '/etc/nagios/mysql.cnf' ]; then
      OPT_DEFT="${OPT_DEFT:-/etc/nagios/mysql.cnf}"
   fi
   if is_not_sourced; then
      if [ -n "$1" ]; then
         echo "WARN spurious command-line options: $@"
         exit 1
      fi
   fi

   NOTE="UNK couldn't query the checksum table"

   # Set up a temp file to hold error messages from MySQL.
   TEMP=$(mktemp -t "${0##*/}.XXXXXX") || exit $?
   trap "rm -f '${TEMP}' >/dev/null 2>&1" EXIT

   # Get the query from the documentation and execute it.
   SQL=$(get_magic_query "${0}" checksum_diff_query)
   SQL=${SQL/CHECKSUM_TABLE/${OPT_TABLE}}
   WARN_DATETIME=$(datetime_hours_ago ${OPT_WARN})
   CRIT_DATETIME=$(datetime_hours_ago ${OPT_CRIT})
   WARN_SQL=${SQL/TIMESTAMP_DATETIME/${WARN_DATETIME}}
   CRIT_SQL=${SQL/TIMESTAMP_DATETIME/${CRIT_DATETIME}}

   WARN_PROBLEMS=$(mysql_exec "${WARN_SQL}" 2>"${TEMP}")
   WARN_EXIT=$?
   if [ $WARN_EXIT = 0 ]; then
      if [ "${WARN_PROBLEMS}" ]; then
         NOTE="pt-table-checksum hasn't checked ${WARN_PROBLEMS} within the threshold of $OPT_WARN hours."
         NOTE="WARN $NOTE"
	 CRIT_PROBLEMS=$(mysql_exec "${CRIT_SQL}" 2>"${TEMP}")
	 CRIT_EXIT=$?
	 if [ $CRIT_EXIT = 0 ]; then
            if [ "${CRIT_PROBLEMS}" ]; then
	       NOTE="pt-table-checksum hasn't checked ${CRIT_PROBLEMS} within the threshold of $OPT_CRIT hours."
               NOTE="CRIT $NOTE"
            fi
         else
            check_table_exists_output
         fi
      else
         NOTE="OK pt-table-checksum has run recently"
      fi
   else
      # If the query returns an error about table not found, then it's not an
      # error.
      check_table_exists_output
   fi

   echo $NOTE
}

# ########################################################################
# Give datetime X hours ago
# ########################################################################
datetime_hours_ago() {
	date -d "$1 hours ago" +"%F %T"
}

# ########################################################################
# Check table exists from error output
# ########################################################################
check_table_exists_output() {
      if grep "Table '${OPT_TABLE}' doesn't exist" "${TEMP}" >/dev/null 2>&1; then
         NOTE="UNK The pt-table-checksum table ${OPT_TABLE} doesn't exist"
      fi
}

# ########################################################################
# Execute a MySQL command.
# ########################################################################
mysql_exec() {
   mysql ${OPT_DEFT:+--defaults-file="${OPT_DEFT}"} ${OPT_HOST:+-h"${OPT_HOST}"} ${OPT_USER:+-u"${OPT_USER}"} \
      ${OPT_PASS:+-p"${OPT_PASS}"} ${OPT_SOCK:+-S"${OPT_SOCK}"} ${OPT_PORT:+-P"${OPT_PORT}"} \
      -ss -e "$1"
}

# ########################################################################
# Retrieve a paragraph from the given file, which includes MAGIC_$2 as a
# pattern.
# ########################################################################
get_magic_query() {
   perl -00 -ne"m/MAGIC_$2/ && print" "$1"
}

# ########################################################################
# Determine whether this program is being executed directly, or sourced/included
# from another file.
# ########################################################################
is_not_sourced() {
   [ "${0##*/}" = "pmp-check-pt-table-checksum-freshness" ] || [ "${0##*/}" = "bash" -a "$_" = "$0" ]
}

# ########################################################################
# Execute the program if it was not included from another file.
# This makes it possible to include without executing, and thus test.
# ########################################################################
if is_not_sourced; then
   OUTPUT=$(main "$@")
   EXITSTATUS=$STATE_UNKNOWN
   case "${OUTPUT}" in
      UNK*)  EXITSTATUS=$STATE_UNKNOWN;  ;;
      OK*)   EXITSTATUS=$STATE_OK;       ;;
      WARN*) EXITSTATUS=$STATE_WARNING;  ;;
      CRIT*) EXITSTATUS=$STATE_CRITICAL; ;;
   esac
   echo "${OUTPUT}"
   exit $EXITSTATUS
fi

# ############################################################################
# Documentation
# ############################################################################
: <<'DOCUMENTATION'
=pod

=head1 NAME

pmp-check-pt-table-checksum-freshness - Alert when pt-table-checksum did not run recently on tables.

=head1 SYNOPSIS

  Usage: pmp-check-pt-table-checksum-freshness [OPTIONS]
  Options:
    --defaults-file FILE Only read mysql options from the given file.
                    Defaults to /etc/nagios/mysql.cnf if it exists.
    -H HOST         MySQL hostname.
    -l USER         MySQL username.
    -p PASS         MySQL password.
    -P PORT         MySQL port.
    -S SOCKET       MySQL socket file.
    -T TABLE        The checksum table; default percona.checksums
    -w HOURS        Warning threshold in hours. Defaults to 24.
    -c HOURS        Critical threshold in hours. Defaults to 168.
    --help          Print help and exit.
    --version       Print version and exit.
  Options must be given as --option value, not --option=value or -Ovalue.
  Use perldoc to read embedded documentation with more details.

=head1 DESCRIPTION

This Nagios plugin examines whether pt-table-checksum tool in Percona toolkit
has run recently. It uses the following query to determine whether tables
haven't been checked recently:

   SELECT /* MAGIC_checksum_diff_query */
   CONCAT(
      COUNT(DISTINCT CONCAT(db, tbl)),
      ' tables')
   FROM CHECKSUM_TABLE
   WHERE
      ts < "TIMESTAMP_DATETIME" AND
      chunk = 1 /* not every run will result in the same amount of chunks */
   HAVING COUNT(*) > 0

The word CHECKSUM_TABLE is replaced by the value of the -T option.  If the table
specified by -T does not exist, no error or warning is raised. This makes it
possible to run this check on all MySQL servers by default, and only receive
alerts if a server is being checksummed by pt-table-checksum.

The word TIMESTAMP_DATETIME is replaced by the timestamp for which threshold it
would trigger.

This check should be backwards compatible with Maatkit's mk-table-checksum tool
as well.

=head1 PRIVILEGES

This plugin executes the following commands against MySQL:

=over

=item *

C<SELECT> against the specified table.

=back

This plugin executes no UNIX commands that may need special privileges. 

=head1 COPYRIGHT, LICENSE, AND WARRANTY

This program is copyright 2012 Gert van Dijk, with credits to the original author
Baron Schwartz, Percona Inc.
Feedback and improvements are welcome.

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, version 2.  You should have received a copy of the GNU General
Public License along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.

=head1 VERSION

pmp-check-pt-table-checksum-freshness 0.0.1

Based on Percona Monitoring Plugins pmp-check-pt-table-checksum 1.0.1

=cut

DOCUMENTATION
